;; 1. CONS CELL的概念
;; CONS CELL的由来先不说，因为到现在我也无法理解这种结构的“真正必要”。
;; 它是这样一种结构: (<左值> . <右值>)，左值称为CAR，右值称为CDR，中间由一个'.(点)' 分割
;; 左右值都是可以是任何类型的值，先来感性的体验一下：
'(1 . 2)                                ; => (1 . 2)
'(1 . "a")                              ; => (1 . "a")
'(1 . nil)                              ; => (1)
'(nil . nil)                            ; => (nil)


;; 2. List是由CONS CELL组成的
'(1 . (2 . (3 . nil)))                  ; => (1 2 3)
'(1 2 3)                                ; => (1 2 3)

;; List是由CONS CELL这样组成:
;; 每个CONS CELL的CAR部分表示当前item的值，CDR部分指向剩余的部分，
;; 循此以往，最后一个元素的CDR指向nil。它(list)其实是一种单向链表结构，如下：
;; '(1 . (2 . (3 . nil)))                  ; => (1 2 3)

;; 3. 构造函数
(cons 1 2)                              ; => (1 . 2)
(cons 1 '())                            ; => (1)

;; 4. quote函数'
;; 前面看到的'单引号，其实是quote函数，即引用。顾名思义，引用而已，不求值。
(quote (1 . 2))                         ; => (1 . 2)
'(1 . 2)                                ; => (1 . 2)

;; 5. car与cdr
;; 顾名思义，就是取出一个CONS CELL的CAR部分、CDR部分，
;; 我们以此来验证一下List是由CONS CELL构造的说法
(car (list 1 2 3))                      ; => 1
(cdr (list 1 2 3))                      ; => (2 3)

;; 6. 测试函数
(consp '(1 . 2))                        ; => t
(consp '(1 . (2 . nil)))                ; => t
(consp nil)                             ; => nil
(listp '(1 . 2))                        ; => t
(listp '(1 . (2 . nil)))                ; => t
(listp nil)                             ; => t，无法理解
(list '(a b c))
