
* Elisp Scripts How-to
** Run Elisp Script in Shell [[http://ergoemacs.org/emacs/elisp_running_script_in_batch_mode.html][(link)]]
   use ~--script~ option. for Example:
   #+BEGIN_SRC emacs-lisp
emacs --script xx-script.el
   #+END_SRC

   More options is here:
   | option Full Syntax | Option Short Syntax | Meaning                                            |
   |--------------------+---------------------+----------------------------------------------------|
   |                    |                     | <50>                                               |
   | --no-init-file     | -q                  | Don't load init files {~/.emacs, ~/.emacs.el, ~/.emacs.d/init.el} nor site-wide default.el. |
   | --no-site-file     |                     | Don't load the side-wide site-start.el             |
   | --batch            |                     | Don't launch emacs as editor. Use it together with --load to specify a lisp file. This implies --no-init-file but not --no-site-file |
   | --load="path"      | -l path             | Execute the elisp file at path                     |
   | --script path      |                     | Run emacs like --batch with --load set to path     |

** Read/Write to File
   Emacs Lisp's I/O operate is process in buffer.
*** Read-Only Text Processing
    To process thousands of files, read only, use =with-temp-buffer=.
    
    #+BEGIN_SRC elisp
(defun my-process-file-readonly (fPath)
  "Process the file at path FPATH..."
  (with-temp-buffer
    (insert-file-contens fPath)
    (message "%s" (buffer-string))))
    #+END_SRC
    
    *Note:* you shouldn't use =find-file= or =write-file=, because they have many side-effects and is slow. See: [[http://ergoemacs.org/emacs/elisp_find-file_vs_with-temp-buffer.html][Emacs Lisp Text Processing: find-file vs with-temp-buffer]]

*** Modify Files
    If you want to change every file you opened, use =with-temp-file=. It will write file automatic.

    #+BEGIN_SRC elisp
(defun my-process-file-write-mode (fPath)
  "Process (with write) the file at path FPATH..."
  (with-temp-file fPath
    (insert-file-contents fPath)
    ;; process text modify
    ))
    #+END_SRC


    If you want to write to file *ONLY* when you actually changed the file, you can use =with-temp-buffer= and =write-region=. Like this:

    #+BEGIN_SRC elisp
(defun my-process-file (fPath)
  "Process the file at path FPATH..."
  (let ((file-changed-p nil))
    (with-temp-buffer
      (insert-file-contents fPath)
      ;; process text
      ;; set file-changed-p to t or nil
      (when file-changed-p (write-region 1 (point-max) fPath)))))
    #+END_SRC

*** Get File Contents
    Use =insert-file-contents= to read file content, then return it.


** File and Directory Manipulation
*** Filename Manipulation
    Commonly used functions to manipulation file names.
    
    #+BEGIN_SRC elisp
(setq f (buffer-file-name))

(file-name-directory f)			; get file's dir path
(file-name-nondirectory f)		; get file name

(file-name-extension f)			; get suffix
(file-name-sans-extension f)		; remove suffix

(file-relative-name f)			; get relative path
(expand-file-name f)			; get full path
    #+END_SRC

*** File and Directory Manipulation
    Commonly used functions to manipulation files and directories. You can use shell command to manipulation files too.

    #+BEGIN_SRC elisp
(file-exists-p FILENAME)
(rename-file FILE NEWNAME &optional OK-IF-ALREADY-EXISTS)
(copy-file FILE NEWNAME &optional OK-IF-ALREADY-EXISTS KEEP-TIME PRESERVE-UID-GID)
(delete-file FILE)
(set-file-modes FILE MODE)

;; get list of file names
(directory-files DIR &optional FULL MATCH NOSORT)

;; create a dir. Non existent paren dirs will be created
(make-directory DIR &optional PARENTS)

;; copy/delete whole dir
(delete-directory DIRECTORY &optional RECURSIVE)
(copy-directory DIR NEWNAME &optional KEEP-TIME PARENTS)
    #+END_SRC

    A file manipulation example:
    
    #+BEGIN_SRC elisp
(defun make-backup ()
  "Make a backup copy of current buffer's file.
Create a backup of current buffer's file.
The new file name is the old file name with trailing “~”, in the same dir.
If such a file already exists, append more “~”.
If the current buffer is not associated with a file, its a error."
  (interactive)
  (let* ((fName (buffer-file-name))
	 (backupName fName))
    (if (null fName)
	(message "current buffer is not a file.")
      (progn
	(while (file-exists-p backupName)
	  (setq backupName (format "%s~" backupName)))
	(copy-file fName backupName))
      (message "backup file: %s as file :%s" fName backupName))))
    #+END_SRC
*** Get Current Elisp Script's Filename in Runtime
    You can variable =load-file-name= store the script's filename by =load=. But if script is execuate by =eval-buffer=, =load-file-name= will be nil. So, the solution is:

    #+BEGIN_SRC elisp
(or load-file-name buffer-file-name)
    #+END_SRC

** Call Shell Command in Elisp
    Commonly functions for call shell command.

    #+BEGIN_SRC elisp
;; sync execute 
(shell-command COMMAND &optional OUTPUT-BUFFER ERROR-BUFFER) ; associate in buffer
(shell-command-to-string COMMAND)			     ; return execute resulat as string

;; async execute (use process)
(start-process-shell-command NAME BUFFER COMMAND)            ; associate in buffer, start a new process
(start-process NAME BUFFER PROGRAM &rest PROGRAM-ARGS)	     ; more oriangle version of start-process-shell-command

;; TODO: async execute (use Emacs 26's async function)
    #+END_SRC
** Print
   In Elisp Script, you'd better use your whole buffer to print script's output, use function =with-output-to-temp-buffer=.
   There is three print function.
   | Function | Purpose                                           |
   |----------+---------------------------------------------------|
   | print    | print lisp object                                 |
   | print1   | like `print', but without newline                 |
   | printc   | like `print', but without newline nor delimiters. |
   |----------+---------------------------------------------------|
** Get Command Line Arguments
   Emacs Script use variable =argv= to store the command line arguments. Different from other language, the Emacs Script's first argument is the real first argument, bug the script name.

   Here's a sample test script

   #+BEGIN_SRC elisp
(mapc
 (lambda (arg)
   (message "argv: %s" arg))
 argv)
   #+END_SRC
* Elisp Language Advanced
** Exit function/loop
*** catch/throw
   Elisp use =catch=, =throw= to "return (value)" before function/loop execute done. That's different from other language, =throw= need take a ~TAG~, and =catch= only catch the TAG what it take. Like this:

   #+BEGIN_SRC elisp
(defun test-exit-func ()
  "Example. using catch/throw to exit function"
  (interactive)
  (catch 'user-exit
    (if (y-or-n-p "exit?")
	(progn
	  (message "existing")
	  (throw 'user-exit 3))		; if yes, exit right away, return 3 to catch
      (progn
	(message "went on")
	4))))
   #+END_SRC

   It means, if you want to exit function ahead, there is must some ~reasons~, write these reasons mapping(catch/throw pair) in code is good for maintainning.
   I like this design.

   =throw= can pass a value, as the "return value". And =catch= will catch the value as the expression's value. Like this:
   
   #+BEGIN_SRC elisp
(progn
  (setq myList [0 1 2 3 4 5])
  (catch 'found-the-number
    (mapc
     (lambda (x)
       (message "%s" x)
       (when (equal x 3)
	 (throw 'found-the-number x)))
     myList)
    nil))				; ==> 3, it's the (catch TAG BODY) express's value
   #+END_SRC   

*** error, user-error
    Sometimes, we need exit program with some break exception, that's error. =error= or =user-error= will exit function/program with a message.

*** use flag variable to exit while loop
    Elisp's =while= loop is the same as other language's. So you can use flag variable to exit while loop.
